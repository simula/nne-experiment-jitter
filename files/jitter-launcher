#!/usr/bin/python3
# -*- coding: utf-8 -*-
# =================================================================
#          #     #                 #     #
#          ##    #   ####   #####  ##    #  ######   #####
#          # #   #  #    #  #    # # #   #  #          #
#          #  #  #  #    #  #    # #  #  #  #####      #
#          #   # #  #    #  #####  #   # #  #          #
#          #    ##  #    #  #   #  #    ##  #          #
#          #     #   ####   #    # #     #  ######     #
#
#       ---   The NorNet Testbed for Multi-Homed Systems  ---
#                       https://www.nntb.no
# =================================================================
#
# Container-based Jitter Launcher for NorNet Edge
#
# Copyright (C) 2018-2023 by Thomas Dreibholz, Foivos Michelinakis
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Contact: dreibh@simula.no
# Contact: foivos@simula.no

from helper import *
import time

DEFAULTCONFIGURATIONPARAMETERS = {
"operator": "Telia",
"mcc": "242",
"mnc": "02",
"measurement_id": "99000",
"network_id": 2
}
REVERTTODEFAULT = False # True: if the configuration file is unreadable run the experiment with the default parameters. False: there is not point to run the experiment if we can not test our specified parameters, so we abort.

# ====== Make sure the log directory exists =================================
try:
   os.makedirs(LOG_DIRECTORY, 0o755, True)
except:
   sys.stderr.write('ERROR: Unable to create directory ' + LOG_DIRECTORY + '!\n')
   sys.exit(1)

# ====== Initialise logger ==================================================
LOGGING_CONF = {
   'version': 1,
   'handlers': {
      'default': {
         'level': 'DEBUG',
         'class': 'logging.handlers.TimedRotatingFileHandler',
         'formatter': 'standard',
         'filename': LOG_DIRECTORY + '/jitter-launcher.log',
         'when': 'D'
      },
   },
   'formatters': {
      'standard': {
         'format': '%(asctime)s %(levelname)s [PID=%(process)d] %(message)s'
      },
   },
   'root': {
      'level': 'DEBUG',
      'handlers': ['default'],
   }
}
logging.config.dictConfig(LOGGING_CONF)
logging.debug('Starting')

logging.debug("start of experiment\n")
logging.debug(f"Starting at {time.time()}\n")

# ====== Read the configuration file - START ==================================
try:
    with open(CONFIG_FILE, "r") as fd:
        configurationParameters = json.load(fd)
        logging.debug(str(configurationParameters) + "\n")
        usingDefaults = False
        saveResultFromString("False", "usingDefaults.txt")
    saveResultFromFileGenericPath(CONFIG_FILE) # just to have the exact experiment configuration of this isntance alongside its results
    if os.path.isfile("/nodeid"):
        logging.debug(str("The nodeID file exists.\n"))
        saveResultFromFileGenericPath("/nodeid")
    else:
        logging.debug(str("The nodeID file is missing."))
        saveResultFromString("00000", "nodeid")
    logging.debug(str("The configuration file was successully parsed."))
except Exception as e:
    logging.debug(str("Cannot retrive /monroe/config {}".format(e)))
    if REVERTTODEFAULT:
        logging.debug(str("Using default parameters......."))
        configurationParameters = DEFAULTCONFIGURATIONPARAMETERS
        usingDefaults = True
        saveResultFromString("True", "usingDefaults.txt")
    else:
        logging.debug(str("we abort this experimnt......."))
        sys.exit(1)
# ====== Read the configuration file - STOP ==================================



# we use the `get` method, to assign values, so that in case a value is missing
# from the configurtion file, we can use its default value.
logging.debug(str("The initial configurationParameters are:\n"))
logging.debug(str(configurationParameters) + "\n")

try:
   operator      = configurationParameters.get("operator", DEFAULTCONFIGURATIONPARAMETERS["operator"])
   mcc           = configurationParameters.get("mcc", DEFAULTCONFIGURATIONPARAMETERS["mcc"])
   mnc           = configurationParameters.get("mnc", DEFAULTCONFIGURATIONPARAMETERS["mnc"])
   measurementID = configurationParameters.get("measurement_id", DEFAULTCONFIGURATIONPARAMETERS["measurement_id"])
   networkID     = configurationParameters.get("network_id", DEFAULTCONFIGURATIONPARAMETERS["network_id"])
   iccid = configurationParameters.get("iccid", None)
except Exception as e:
   sys.stderr.write('Invalid or incomplete configuration in ' + CONFIG_FILE + ':' + str(e) + '\n')
   sys.exit(1)

if operator != "Wired":
   operator_interface = mapMobileOperatorsToInterfacesAndSourceIPs([operator])
else:
   try:
      operator_interface = getWiredInterfaceSourceIP()
   except Exception as e:
      sys.stderr.write('Error finding the wired interface with message ' + ':' + str(e) + '\n')
      sys.exit(1)

print(operator_interface)

# ====== Start instances ====================================================
processes = {}
while True:
   if measurementID in processes:
      if processes[measurementID].poll() != None:
         del processes[measurementID]
         sys.stderr.write('WARNING: Instance for measurement ID ' + measurementID + ' has stopped!\n')

   if not measurementID in processes:
      logging.debug('Starting instance ' + str(measurementID) + ' for Operator ' + operator + ' ...' + ' on interface ' + operator_interface[operator]['interface'] + ' with sourceIPv4 ' + operator_interface[operator]['sourceIPv4'] + ' ...')
      processes[measurementID] = subprocess.Popen([ 'hipercontracer',
                                                      '--identifier',               str(measurementID),
                                                      '--resultsdirectory',         '/monroe/results',
                                                      '--resultstransactionlength', '300',
                                                      '--iomodule',                 'UDP',
                                                      '--jitter',
                                                      '--jitterrecordraw',
                                                      '--source',                   operator_interface[operator]['sourceIPv4'],
                                                      '--destination',              '128.39.37.70',
                                                      '--jitterinterval',           '60000',
                                                      '--jitterburst',              '16',
                                                      '--jitterpacketsize',         '64',
                                                      # Logging for debugging purposes (should be commented out):
                                                      '--logfile',                  '/monroe/results/hipercontracer-%Y%m%dT%H:%M:%S.log',
                                                      '--loglevel',                 '2',
                                                      '--logcolor',                 'off'
                                                   ],
                                                   env = {
                                                      'LD_LIBRARY_PATH': '/opt/monroe'
                                                   })
      logging.debug('Started instance ' + str(measurementID) + ' for Operator ' + operator + ' ...' + ' on interface ' + operator_interface[operator]['interface'] + ' with sourceIPv4 ' + operator_interface[operator]['sourceIPv4'] + ' ...')

logging.debug(str(f"Finished at {time.time()}\n"))
saveResultFromString(logstring, "logstring.txt")


logging.debug('Waiting for processes to finish ...')
for process in processes:
   process.wait()
logging.debug('Finished!')
